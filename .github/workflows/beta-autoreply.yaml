name: Autoreply to Bug Issues
on:
  issues:
    types: [opened]
jobs:
  autoreply-to-bugs:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
    - name: Check and Respond to Bug Issues
      uses: actions/github-script@v7 # Use latest major version
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const issueBody = context.payload.issue.body;
          const issueTitle = context.payload.issue.title;

          // Check if it's a bug issue (case-insensitive)
          if (!issueTitle.toLowerCase().includes('[bug]')) {
            console.log('Not a bug issue. Skipping. Title:', issueTitle);
            return;
          }

          console.log('Processing bug issue:', issueTitle);

          // Extract version from the issue body (make regex more specific for ### Version)
          const versionRegex = /###\s+Version\s*[\r\n]+(?:```\s*[\r\n]*)?([0-9.a-zA-Z-]+)[\s\r\n]*(?:```)?/i;
          const versionMatch = issueBody ? issueBody.match(versionRegex) : null;

          if (!versionMatch || !versionMatch[1]) {
            console.log('Version not specified or not found in the expected format in the issue body. Skipping response.');
            // Optionally, you could post a comment asking for the version here.
            // Example:
            /*
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Could not find the version information in your report. Please ensure you're using the bug report template and specify the version under the '### Version' heading."
            });
            */
            return;
          }

          const reportedVersion = versionMatch[1].trim().replace(/^v/, ''); // Also strip 'v' if present
          console.log('Reported version:', reportedVersion);

          // Fetch the latest beta release
          let latestBeta;
          try {
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Find the most recent release that is marked as prerelease
            // Releases are typically sorted newest first by API, but let's be sure
            latestBeta = releases
              .filter(release => release.prerelease)
              .sort((a, b) => new Date(b.published_at) - new Date(a.published_at))[0];

          } catch (error) {
            console.error("Error fetching releases:", error);
            // Potentially retry or notify, for now, we'll skip
            return;
          }


          if (!latestBeta) {
            console.log('No beta release found. Skipping response.');
            return;
          }

          const latestBetaVersion = latestBeta.tag_name.replace(/^v/, ''); // Strip 'v' prefix if present
          console.log('Latest beta version:', latestBetaVersion);

          // Compare versions
          // We want to reply if reportedVersion is LESS THAN latestBetaVersion
          // compareVersions(a,b) returns:
          // -1 if a < b
          //  0 if a == b
          //  1 if a > b
          // So, we reply if compareVersions(reportedVersion, latestBetaVersion) < 0
          if (compareVersions(reportedVersion, latestBetaVersion) >= 0) {
            console.log(`Reported version (${reportedVersion}) is the same as or newer than the latest beta (${latestBetaVersion}). No response needed.`);
            return;
          }

          // Respond to the issue
          const response = `Thank you for reporting this issue. It is possible this issue has already been solved in the latest beta version.\nPlease try updating to the latest beta version of the plugin (${latestBetaVersion}) and see if the issue persists.\n\nYou can find the latest beta release here: ${latestBeta.html_url}.\nInstructions for installing are located in the readme.\n\nIf the problem continues after updating, please let us know, and we'll investigate further.`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: response
          });

          console.log('Response posted successfully.');

          /**
           * Compares two version strings (e.g., "1.8.01", "1.9.0-3b", "1.9.0").
           * Handles simple numeric parts and pre-release identifiers like "-Nb" or "-beta.N".
           * @param {string} v1 First version string.
           * @param {string} v2 Second version string.
           * @returns {number} -1 if v1 < v2, 0 if v1 == v2, 1 if v1 > v2.
           */
          function compareVersions(v1, v2) {
            // Helper to parse version string into numeric parts and a pre-release identifier object
            const parse = (v) => {
              const parts = v.split('-');
              const numericStr = parts[0];
              const preReleaseStr = parts.length > 1 ? parts.slice(1).join('-') : null;

              let preReleaseInfo = null;
              if (preReleaseStr) {
                // Handle formats like "3b", "10rc1", "beta", "alpha.2"
                const preParts = preReleaseStr.split('.'); // e.g. "beta.2" -> ["beta", "2"]
                preReleaseInfo = preParts.map(part => {
                  const numMatch = part.match(/^(\d+)([a-zA-Z]+)$/); // e.g. "3b" -> ["3b", "3", "b"]
                  if (numMatch) return [parseInt(numMatch[1]), numMatch[2]];
                  if (!isNaN(part)) return parseInt(part);
                  return part; // "beta", "rc"
                });
              }

              return {
                num: numericStr.split('.').map(Number),
                pre: preReleaseInfo // Array of pre-release segments or null
              };
            };

            const p1 = parse(v1);
            const p2 = parse(v2);

            // Compare numeric parts (major, minor, patch)
            for (let i = 0; i < Math.max(p1.num.length, p2.num.length); i++) {
              const n1 = p1.num[i] || 0; // Default to 0 if part is missing (e.g. 1.8 vs 1.8.0)
              const n2 = p2.num[i] || 0;
              if (n1 < n2) return -1;
              if (n1 > n2) return 1;
            }

            // Numeric parts are equal, now compare pre-release identifiers
            // A version without pre-release is HIGHER than one with (e.g., 1.9.0 > 1.9.0-3b)
            if (p1.pre && !p2.pre) return -1; // v1 is pre-release, v2 is stable => v1 < v2
            if (!p1.pre && p2.pre) return 1;  // v1 is stable, v2 is pre-release => v1 > v2
            if (!p1.pre && !p2.pre) return 0; // Both stable (or no pre-release) and equal numeric parts

            // Both are pre-releases, compare them segment by segment
            for (let i = 0; i < Math.max(p1.pre.length, p2.pre.length); i++) {
              const seg1 = p1.pre[i];
              const seg2 = p2.pre[i];

              // If one version has more pre-release segments, it's considered "further along" if other segments were equal
              // Semver: 1.0.0-alpha < 1.0.0-alpha.1
              if (seg1 === undefined) return -1; // p1 is shorter, so "less"
              if (seg2 === undefined) return 1;  // p2 is shorter, so "less"

              // Handle parsed segments like [3, 'b']
              if (Array.isArray(seg1) && Array.isArray(seg2)) { // Both are like [number, string] e.g. "3b"
                  if (seg1[0] < seg2[0]) return -1; // Compare numbers
                  if (seg1[0] > seg2[0]) return 1;
                  const strCompare = seg1[1].localeCompare(seg2[1]); // Compare strings
                  if (strCompare !== 0) return strCompare;
              } else if (typeof seg1 !== typeof seg2) {
                  // Semver: Numbers are lower than strings (e.g. 1.0.0-alpha.1 < 1.0.0-alpha.beta)
                  return (typeof seg1 === 'number') ? -1 : 1;
              } else if (typeof seg1 === 'number') { // Both are numbers
                  if (seg1 < seg2) return -1;
                  if (seg1 > seg2) return 1;
              } else { // Both are strings (e.g. "alpha" vs "beta")
                  const strCompare = seg1.localeCompare(seg2);
                  if (strCompare !== 0) return strCompare;
              }
            }
            return 0; // Pre-release identifiers are also identical
          }
